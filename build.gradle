// BEGIN ALL PROJECTS //
allprojects {
    apply plugin: 'java'
}
// END ALL PROJECTS

// BEGIN SUBPROJECTS //
subprojects { subproject ->

    apply plugin: 'maven'
    apply plugin: 'signing'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    jar.baseName = subproject.name

    [compileJava, compileTestJava].each {
        it.options.compilerArgs << '-Xlint:unchecked'
    }

    checkstyle {
        configFile = file("${rootDir}/config/checkstyle/google_checks.xml")
        toolVersion = '6.18'
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task tarBall(type: Tar) {
        classifier = 'dist'
        baseName = subproject.name
        from subproject.configurations.runtime
        from jar
    }

    signing {
        sign configurations.archives
        required {
            gradle.taskGraph.hasTask('uploadArchives')
        }
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2') {
                    authentication(userName: findProperty('ossrhUsername') ?: '', password: findProperty('ossrhPassword') ?: '')
                }

                snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                    authentication(userName: findProperty('ossrhUsername') ?: '', password: findProperty('ossrhPassword') ?: '')
                }

                pom.project {

                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    scm {
                        connection 'scm:git:git://github.com/wepay/kafka-connect-bigquery.git'
                        developerConnection 'scm:git:ssh://github.com:wepay/kafka-connect-bigquery.git'
                        url 'https://github.com/wepay/kafka-connect-bigquery'
                    }

                    developers {
                        developer {
                            id 'C0urante'
                            name 'Chris Egerton'
                            email 'fearthecellos@gmail.comw'
                        }

                        developer {
                            id 'moirat'
                            name 'Moira Tagle'
                            email 'moirat@wepay.com'
                        }
                    }
                }
            }
        }
    }
}
// END SUBPROJECTS

// BEGIN ROOT PROJECT
task confluentTarBall(type: Tar) {
    destinationDir = file("${rootDir}/bin/tar/")
    baseName = 'kcbq-connector'
    classifier = 'confluent-dist'
    with project(':kcbq-connector').tarBall
    with project(':kcbq-confluent').tarBall
    exclude 'jackson-core-2.1.3.jar' // Runtime conflicts occur if this is left in; thankfully, 2.5.4 is compatible
}

clean {
    delete "${rootDir}/bin/"
}
// END ROOT PROJECT

// BEGIN INDIVIDUAL PROJECTS
project(':kcbq-connector') {
    apply plugin: 'jacoco'

    jar {
        manifest {
            attributes  'Implementation-Title': 'Kafka Connect BigQuery Connector',
                        'Implementation-Version': version

        }
    }

    repositories {
        mavenCentral()
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output
                runtimeClasspath += main.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    task integrationTestPrep(type: JavaExec) {
        main = 'com.wepay.kafka.connect.bigquery.it.utils.TableClearer'
        classpath = sourceSets.integrationTest.runtimeClasspath
        args findProperty('kcbq_test_keyfile') ?: ''
        args findProperty('kcbq_test_project') ?: ''
        args findProperty('kcbq_test_dataset') ?: ''
        if (findProperty('kcbq_test_tables') != null)
            args findProperty('kcbq_test_tables').split(' ')
    }

    task integrationTest(type: Test) {
        testClassesDir = sourceSets.integrationTest.output.classesDir
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    compileIntegrationTestJava.options.compilerArgs << '-Xlint:unchecked'

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    javadoc {
        options.links 'http://docs.oracle.com/javase/8/docs/api/'
        options.links 'http://docs.confluent.io/3.2.0/connect/javadocs/'
        options.links 'http://googlecloudplatform.github.io/google-cloud-java/0.2.7/apidocs/'
        options.links 'https://kafka.apache.org/0100/javadoc/'
        options.links 'https://avro.apache.org/docs/1.8.1/api/java/'
    }

    jacocoTestReport {
        reports {
            html.destination "${buildDir}/reports/jacoco/"
            xml.enabled true
        }
    }

    dependencies {
        compile project(':kcbq-api')

        compile group: 'com.google.cloud', name: 'google-cloud', version: '0.25.0-alpha'
        compile group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '0.9.0'
        compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

        compile group: 'io.debezium', name: 'debezium-core',  version:'0.4.0'

        compile group: 'org.apache.kafka', name: 'connect-api', version: '1.0.0'
        compile group: 'org.apache.kafka', name: 'kafka-clients', version: '1.0.0'

        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'
        compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.6.1'

        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    }

    artifacts {
        archives javadocJar, sourcesJar, tarBall, rootProject.confluentTarBall
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                pom.project {
                    name 'Kafka Connect BigQuery Connector'
                    packaging 'jar'
                    description 'A Kafka Connector used to load data into BigQuery'
                    url 'https://github.com/wepay/kafka-connect-bigquery'
                }
            }
        }
    }
}

project('kcbq-api') {
    jar {
        manifest {
            attributes  'Implementation-Title': 'Kafka Connect BigQuery API',
                        'Implementation-Version': version
        }
    }

    repositories {
        mavenCentral()
    }

    javadoc {
        options.links 'http://docs.oracle.com/javase/8/docs/api/'
        options.links 'http://docs.confluent.io/3.2.0/connect/javadocs/'
    }

    dependencies {
        compile group: 'com.google.cloud', name: 'google-cloud', version: '0.25.0-alpha'

        compile group: 'org.apache.kafka', name: 'connect-api', version: '1.0.0'
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                pom.project {
                    name 'Kafka Connect BigQuery Connector API'
                    packaging 'jar'
                    description 'A small API for the Kafka Connector used to load data into BigQuery'
                    url 'https://github.com/wepay/kafka-connect-bigquery'
                }
            }
        }
    }
}

project('kcbq-confluent') {
    jar {
        manifest {
            attributes  'Implementation-Title': 'Kafka Connect BigQuery Schema Registry Schema Retriever',
                        'Implementation-Version': version
        }
    }

    repositories {
        mavenCentral()
        maven {
            url 'http://packages.confluent.io/maven'
        }
        jcenter()
    }

    javadoc {
        options.links 'http://docs.oracle.com/javase/8/docs/api/'
        options.links 'http://docs.confluent.io/3.2.0/connect/javadocs/'
    }

    dependencies {
        compile project(':kcbq-api')

        compile group: 'com.google.cloud', name: 'google-cloud', version: '0.25.0-alpha'

        compile group: 'io.confluent', name: 'kafka-connect-avro-converter', version: '3.2.0'
        compile group: 'io.confluent', name: 'kafka-schema-registry-client', version: '3.2.0'

        compile group: 'org.apache.avro', name: 'avro', version: '1.8.1'

        compile group: 'org.apache.kafka', name: 'connect-api', version: '1.0.0'
        compile group: 'org.apache.kafka', name: 'kafka-clients', version: '1.0.0'

        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.6.1'

        testCompile group: 'junit', name: 'junit', version: '4.12'
        testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    }

    artifacts {
        archives javadocJar, sourcesJar
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                pom.project {
                    name 'Kafka Connect BigQuery Connector Schema Registry Schema Retriever'
                    packaging 'jar'
                    description 'A Schema Registry-based schema retriever for the Kafka Connector used to load data into BigQuery'
                    url 'https://github.com/wepay/kafka-connect-bigquery'
                }
            }
        }
    }
}
// END INDIVIDUAL PROJECTS
